// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=notopt);
    Mux16(a=outalu, b=instruction, sel=notopt, out=muxa); // sel=not(opt)

	Not(in=instruction[5], out=notins5);
	And(a=instruction[15], b=notins5, out=andoptnotins5);
	Not(in=andoptnotins5, out=loada);
    ARegister(in=muxa, load=loada, out=outa, out[0..14]=addressM); // A; if opt=1 load=ins5 else load=1

    And(a=instruction[15], b=instruction[12], out=mm); // opt=instruction[15], m=instruction[12]
    Mux16(a=outa, b=inM, sel=mm, out=muxm); // if opt=1 sel=m else sel=0; sel=opt&m

    And(a=instruction[15], b=instruction[4], out=mc2); // opt=instruction[15], d2=instruction[4]
    DRegister(in=outalu, load=mc2, out=outd); // D; if opt=1 load=d2 else load=0; load=opt&d2

    ALU(x=outd, y=muxm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outalu, zr=aluzr, ng=alung);

    And(a=instruction[15], b=instruction[3], out=writeM); // writeM=opt&d3; opt=instruction[15], d3=instruction[3]

	And(a=aluzr, b=instruction[1], out=zrj2); // j2=instruction[1]
	And(a=alung, b=instruction[2], out=ngj1); // j1=instruction[2]
	Or(a=zrj2, b=ngj1, out=w1);
	Not(in=aluzr, out=nzr);
	Not(in=alung, out=nng);
	And(a=nzr, b=nng, out=tnzrng);
	And(a=tnzrng, b=instruction[0], out=tj3); // j3=instruction[0]
	Or(a=tj3, b=w1, out=w2);
	And(a=w2, b=instruction[15], out=w3);
    PC(in=outa, load=w3, inc=true, reset=reset, out[0..14]=pc);
}
